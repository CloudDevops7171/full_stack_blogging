pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    environment {
        SPECTRAL_DSN = credentials('spectral-dsn')
        Docker_Repo = credentials('dockerCred')
        ISSUE_THRESHOLD = 200
        SKIP_REMAINING = 'false'
    }
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'githubCred', url: 'https://github.com/swastik7777/FullStack-Blogging-App.git'
            }
        }
        stage('Code Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('Code Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Install Spectral') {
            steps {
                sh 'curl -L "https://get.spectralops.io/latest/x/sh?dsn=${SPECTRAL_DSN}" | sh'
            }
        }
        stage('Prepare Scan Directory') {
            steps {
                sh 'mkdir -p scans'
            }
        }
        stage('Scan for Issues') {
    steps {
        script {
            def outputFile = "scans/output-${env.BUILD_NUMBER}.json"
                sh "\"$HOME/.spectral/spectral\" scan --json ${outputFile} --ok --engines secrets,iac,oss --include-tags base,audit,iac"

                def scanResult = readFile(file: outputFile)
                def json = readJSON text: scanResult
                def totalIssues = json?.totalIssues ?: 0

                if (totalIssues.toInteger() > env.ISSUE_THRESHOLD.toInteger()) {
                    currentBuild.result = 'ABORTED'
                    error "Aborting build: Total issues ($totalIssues) exceed threshold (${env.ISSUE_THRESHOLD})"
                    env.SKIP_REMAINING = "true"
                } else {
                    echo "Total issues ($totalIssues) are within acceptable limits."
                }
      
        }
    }
}

        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs --format table -o fs.html .'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn package'
            }
        }
        stage('Docker Build & Tag') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'dockerCred']) {
                        sh "docker build -t swastik2929/blogger-app:${env.BUILD_NUMBER} ."
                    }
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                sh "trivy image --format table -o blogger-app-${env.BUILD_NUMBER}.html swastik2929/blogger-app:${env.BUILD_NUMBER}"
            }
        }
        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'dockerCred']) {
                        sh "docker push swastik2929/blogger-app:${env.BUILD_NUMBER}"
                    }
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = 'FullStack-Blogging-App'
                GIT_USER_NAME = 'swastik7777'
            }
            steps {
                withCredentials([string(credentialsId: 'gitToken', variable: 'GH_TOKEN')]) {
                    dir('k8s') {
                        sh '''
                        git config user.email "swastikgomase.sae.comp@gmail.com"
                        git config user.name "swastik7777"
                        imageTag=swastik2929/blogger-app:$BUILD_NUMBER
                        awk -v imageTag="${imageTag}" '/image:/ {$0 = "          image: " imageTag} {print}' deployment-service.yaml > temp.yaml && mv temp.yaml deployment-service.yaml
                        echo "Updating deployment-service.yaml with image tag: $imageTag"
                        git add deployment-service.yaml
                        git commit -m "Update deployment image to version $BUILD_NUMBER"
                        git push https://${GH_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline completed. Cleaning up...'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check above logs.'
        }
    }
}
