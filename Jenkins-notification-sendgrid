pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }

    environment {
        Docker_Repo = credentials('dockerCred')
        SENDGRID_API_KEY = credentials("sendgridApi")
    }
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'githubCred', url: 'https://github.com/swastik7777/FullStack-Blogging-App.git'
            }
        }

        stage('Code Compile') {
            steps {
                sh 'mvn compile'
            }
        }

        stage('Code Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                script {
                    // Set SCANNER_HOME inside script block
                    env.SCANNER_HOME = tool "sonarScan"
                }
                withSonarQubeEnv("sonar") {
                    sh """
                         ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=blogging-app \
                        -Dsonar.projectKey=blogging-app \
                        -Dsonar.java.binaries=target
                    """
                }
            }
        }
         

        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs --format table -o fs.html .'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn package'
            }
        }

        stage('Docker Build & Tag') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'dockerCred']) {
                        sh "docker build -t swastik2929/blogger-app:${env.BUILD_NUMBER} ."
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh "trivy image --format table -o blogger-app-${env.BUILD_NUMBER}.html swastik2929/blogger-app:${env.BUILD_NUMBER}"
            }
        }

        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'dockerCred']) {
                        sh "docker push swastik2929/blogger-app:${env.BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = 'FullStack-Blogging-App'
                GIT_USER_NAME = 'swastik7777'
            }
            steps {
                withCredentials([string(credentialsId: 'gitToken', variable: 'GH_TOKEN')]) {
                    dir('k8s') {
                        sh '''
                            git config user.email "swastikgomase.sae.comp@gmail.com"
                            git config user.name "swastik7777"
                            imageTag=swastik2929/blogger-app:$BUILD_NUMBER
                            awk -v imageTag="${imageTag}" '/image:/ {$0 = "          image: " imageTag} {print}' deployment-service.yaml > temp.yaml && mv temp.yaml deployment-service.yaml
                            echo "Updating deployment-service.yaml with image tag: $imageTag"
                            git add deployment-service.yaml
                            git commit -m "Update deployment image to version $BUILD_NUMBER"
                            git push https://${GH_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }

post {
    success {
        script {
            def payload = """
            {
              "personalizations": [{"to": [{"email": "swastikgomase143@gmail.com"}]}],
              "from": {"email": "cloudevops2929@gmail.com"},
              "subject": "âœ… Jenkins Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
              "content": [{"type": "text/plain", "value": "Build succeeded!"}]
            }
            """
            sh """
                curl -X POST https://api.sendgrid.com/v3/mail/send \
                -H "Authorization: Bearer ${SENDGRID_API_KEY}" \
                -H "Content-Type: application/json" \
                -d '${payload}'
            """
        }
    }
}
}
